---
title: "q12_05_maps"
format: html
---


# Check previous Maps

```{r}
#| echo: false
#| results: hide
library(pacman)

# Use pacman to load and install the required packages
pacman::p_load(
  arrow,
  dplyr,
  flextable,
  ggplot2,
  ggspatial,
  htmltools,
  htmlwidgets,
  kableExtra,
  knitr,
  leaflet,
  lubridate,
  magrittr,
  mapview,
  officer,
  purrr,
  RColorBrewer,
  readr, # For reading and writing data
  readxl,   # For reading Excel files
  rnaturalearth,
  rnaturalearthdata,
  scales,
  skimr,
  sf,
  stringr,
  tidyverse,
  tidyr,
  viridis,
  webshot2,
  writexl
  )
```


```{r}
#| echo: false
injection_map04 <- readRDS("qt_outputs/qt12_outputs/injection_map04.rds")

injection_map04

```

# New Map

```{r}
#| echo: false
#| results: hide
# Read and store all privados into a named list
# Read all KML files from the hub_kml directory
hub_files <- list.files("qt_inputs/qt12_inputs/hub_kml/", pattern = "^hub_\\d{2}\\.kml$", full.names = TRUE)

# Read each KML and clean geometry
hub_list <- purrr::map(hub_files, function(f) {
  st_read(f, quiet = TRUE) %>%
    st_zm(drop = TRUE, what = "ZM")
})

# Assign names to the list elements
names(hub_list) <- paste0("hub_", sprintf("%02d", seq_along(hub_files)))

# Define selected hubs
selected_hub <- c(1, 2)
injection_map05 <- injection_map04  # Start with base map

# Store labels for legend
# Define vector to collect hub labels
hub_labels <- c()

# Create new map based on existing
injection_map05 <- injection_map04

# Loop through selected hubs
for (i in selected_hub) {
  hub_id <- paste0("hub_", sprintf("%02d", i))
  hub_data <- hub_list[[hub_id]]
  hub_color <- RColorBrewer::brewer.pal(6, "Set1")[i]

  # If geometry is not POINT, convert to centroid
  if (!any(grepl("POINT", class(hub_data$geometry)))) {
    hub_data <- hub_data %>% mutate(geometry = st_centroid(geometry))
  }

  # Store label for legend
  label_name <- unique(hub_data$Name)[1]
  hub_labels <- c(hub_labels, label_name)

  # Add circles
  injection_map05 <- injection_map05 %>%
    addCircleMarkers(
      data = hub_data,
      radius = 6,
      color = hub_color,
      fillColor = hub_color,
      fillOpacity = 0.8,
      stroke = TRUE,
      popup = ~Name,
      label = ~Name
    )
}

# Add a legend for the hubs
injection_map05 <- injection_map05 %>%
  addLegend(
    position = "bottomright",
    colors = RColorBrewer::brewer.pal(6, "Set1")[selected_hub],
    labels = hub_labels,
    title = "Centros de Mercado",
    opacity = 0.8
  )

injection_map05
```

```{r}
#| echo: false
#| results: hide
saveRDS(injection_map05, "qt_outputs/qt12_outputs/injection_map05.rds")

```

## New map formatted

```{r}
#| echo: false
#| warning: false
### Cambio a Verdana

injection_map05 <- injection_map05 %>%
  htmlwidgets::onRender("
    function(el, x) {
      var css = `
        .leaflet-popup-content,
        .leaflet-control,
        .leaflet-control-legend,
        .leaflet-tooltip {
          font-family: Verdana, sans-serif !important;
          font-size: 11px !important;
        }
      `;
      var style = document.createElement('style');
      style.type = 'text/css';
      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
      document.head.appendChild(style);
    }
  ")

injection_map05

```


```{r}
#| echo: false
#| results: hide
#| warning: false

saveWidget(injection_map05, "qt_outputs/qt12_outputs/injection_map05.html", selfcontained = TRUE)
# If not installed:
# install.packages("webshot2")
mapview::mapshot(
  x = injection_map05,
  file = "qt_outputs/qt12_outputs/injection_map05.png",
  selfcontained = TRUE,
  vwidth = 1200,       # Width in pixels
  vheight = 900       # Height in pixels
)


```